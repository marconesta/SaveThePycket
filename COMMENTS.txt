idea per gestire i postini al posto della fotocamera: il postino suona --> sensore suono lo sente e capisce a chi mandare la notifica 
(grazie al collegamento sensore suono-utente) --> il postino inserisco il numero dell'ordine in una keyboard :

CODICE 
il sensore di suono pubblica la sua misura (>threshold): telegram ascolta e manda la notifica al chat id associato dell'utente.
allo stesso tempo la keyboard è sottoscritto a tutti i sensori di suono del condominio: quando uno dei sensori pubblica che qualcuno ha suonato, 
la keyboard si associa al chat id del sensore di suono suonato. così il numero di ordine inserito dal postino verrà inviato all'utente del chat
id associato attualmente alla keyboard. l'utente controlla il numero di ordine e apre il portone se corretto.

- ! per Sensor_Relaybox: per ogni relay di una diversa box serve un json diverso (ogni registration avviene da terminale diverso)--> chiedere
se è ok per scalabilità

- dashboard: deve fare la richiesta al catalog non prendere i dati dai settings

- aggiunto sensor_name ai settings dei sensori, cambiato registration in Sensor Manager
- cambiato resource catalog che deve controllare che boxID e buildingID in ''boxes'' esistano già
- il topic di tutti i doorbells è "topic": "SaveThePycket/sensors/doorbells/#", quando la keyboard deve pubblicare il codice 
per farlo arrivare al telegram dell'utente, pubblica al topic code+"&"+topic_doorbell[-1] dove topic_doorbell[-1] corrispondere 
allo userID (ex "topic": "SaveThePycket/sensors/doorbells/sensor_dB_1", prende "1" == userID)

-se un utente vuole entrare in un building che non corrisponde al suo building sul resource_cat (con chatID!=0), gli diamo la possibilità di cambiare buildingID contattando il gestore!!!!!
-se l'utente non è dentro la lista degli users (cambiare "Try again!..."), gli facciamo scegliere comunque la strada e il numero e inserire la password, se la
password è corretta, facciamo una POST e aggiungiamo l'utente alla lista degli user

DA FARE:
-modificare sensori con i react nel SensorManager --> cambiare e fare per tutti i sensori una classe che estende SensorManager e fa l'override 
del metodo del notify 
-modificare registrazione telegram --> teoricamente adesso funziona 
-aggiungere sensori nel menu telegram e gestire richieste REST --> aggiustato con mongodb
-mqtt telegram --> da fare
-aggiungere "status" nei parametri del led per poi fare la richiesta al resource catalog per vedere quali box sono libere
-streamlit

NEW:
- Sensor Temp and Hum: correggere il notify (se è necessario)
- su telegram gestire le richieste sulle misure (led, peso, etc, l'unico che funge è il temp_and_hum, che prende solo la temperatura al momento): le query sul database 
    prendono selected_measure che deriva dal nome mandato sull'uri della GET: se ci sono spazi vengono aggiunti %20 che 
    devono essere tolti e si deve prendere la misura corrispondente a quella salvata sul database 
    (il peso funziona ma il timestamp non è corretto)
- TELEGRAM: per fare la scelta sulla box da monitorare-> elencare le box libere (senza bottoni) e le box occupate con bottoni (quelle saranno da monitorare). 
Tasti da monitorare saranno: Temp&Hum, Weight e Open the BOX (che si può fare solo se l'utente è associato alla box).
- capire docker per eseguire i file

STATISTICHE:
1. numero di utenti che si sono registrati al sistema (telegram) --> contare il numero di chatID diversi nel resource catalog divisi per buildingID
2. percentuale di box occupate --> contare il numero di box occupate e dividere per il numero totale di box in un periodo di tempo 
(una settimana, un mese, ecc.) --> sarebbe carino definire una treshold, per esempio se più del 50% delle box non sono occupate, mettere un
warning sul dashboard indirizzato all'admin di quel building
3. contare quante volte gli utenti trovano tutte le box occupate e non possono usare il sistema
4. definire una temperatura threshold (e fare stessa cosa per l'umidità) di ''rischio'' per le boxes e mandare un warning all'admin del building se la temperatura media in 
un arco di tempo supera la threshold --> per implementazioni future si potrebbe giustificare l'aggiunta di boxes più termoresisetenti.
5. fare confronti per i diversi buildings gestiti dallo stesso admin (plottare le statistiche in un unico grafico) 
6. calcolare il numero medio di utilizzo su numero di utenti registrati (per esempio se un utente usa il sistema 10 volte al giorno, 
un altro 1 volta al giorno e un altro 0 volte al giorno, la media è 11/3 = 3.66 volte al giorno per utente)
7. (ipotetico) modificare telegram in modo tale che quando un utente clicca su "open door" avviene una POST/PUT al resource catalog
che aggiorna il numero di volte che l'utente ha usato il sistema (per fare statistiche sul numero di volte che un utente usa il sistema):
ad esempio salvare durante la fase di registrazione degli utenti anche la chiave "times_used" con valore 0, e ogni volta che l'utente
usa il sistema incrementare il valore di 1. In questo modo si può fare una media del numero di volte che un utente usa il sistema in un arco 
di tempo. --> se poi viene definita una threshold per un ''super_user'' (es. 10 volte al giorno) si può calcolare in media quanti super_users
ci sono per building --> se io sono admit di 3 building e in media il primo ha 3 super_users/tot_num_diusers, il secondo 5 e il terzo 1, posso capire che 
il primo building è quello più utilizzato e che quindi ha bisogno di più manutenzione rispetto agli altri due. 
8. calcolare tempo medio in cui un pacco sta dentro una box (per esempio se un pacco sta 1 ora in una box, un altro 2 ore e un altro 3 ore,
la media è 6/3 = 2 ore) 

TELEGRAM
-aggiungere caso in cui l'utente ha associate più box per pacchi diversi (linea 487)
-controllare i "go back"
-controllare box associate quando sono più di una
-aggiungere humidity su telegram nei sensori
